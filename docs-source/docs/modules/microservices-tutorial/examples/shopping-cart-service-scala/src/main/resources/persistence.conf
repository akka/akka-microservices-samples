akka {
  # use JDBC plugin to store both snapshots and the events of the persistent actors
  persistence {
    journal.plugin = "jdbc-journal"
    auto-start-journals = ["jdbc-journal"]

    snapshot-store.plugin = "jdbc-snapshot-store"
    auto-start-snapshot-stores = ["jdbc-snapshot-store"]
  }

  projection {
    jdbc.blocking-jdbc-dispatcher.thread-pool-executor.fixed-pool-size = 10
    jdbc.dialect = postgres-dialect
  }
}

# this settings is used to configure the Spring Data layer and the akka-persistence-jdbc plugin
jdbc-connection-settings {
  driver = "org.postgresql.Driver"

  # the following properties must be filled with the production values
  # they can be set using -D arguments, eg: -jdbc-connection-settings.user=the-production-user
  url = <add-here-the-production-url>
  user = <add-here-the-production-db-user>
  password = <add-here-the-production-db-password>
}


akka-persistence-jdbc {
  shared-databases {
    default {
      # the slick profile must be compatible with the configured jdbc-connection-settings.driver
      # possible choices are:
      #  - slick.jdbc.PostgresProfile$
      #  - slick.jdbc.MySQLProfile$
      #  - slick.jdbc.H2Profile$
      #  - slick.jdbc.SQLServerProfile$
      #  - slick.jdbc.OracleProfile$
      profile = "slick.jdbc.PostgresProfile$"
      db {
        host = "localhost"
        url = ${jdbc-connection-settings.url}
        user = ${jdbc-connection-settings.user}
        password = ${jdbc-connection-settings.password}
        driver = ${jdbc-connection-settings.driver}
        numThreads = 5
        maxConnections = 5
        minConnections = 1
      }
    }
  }
}

jdbc-journal {
  use-shared-db = "default"
}

# the akka-persistence-snapshot-store in use
jdbc-snapshot-store {
  use-shared-db = "default"
}

# the akka-persistence-query provider in use
jdbc-read-journal {
  use-shared-db = "default"
}

# ScalikeJDBC connection pool settings
# http://scalikejdbc.org/documentation/configuration.html
db.default {
  url = ${jdbc-connection-settings.url}
  user = ${jdbc-connection-settings.user}
  password = ${jdbc-connection-settings.password}
  driver = ${jdbc-connection-settings.driver}

  # Connection Pool settings
  poolInitialSize = 5
  # The `poolMaxSize` should not be smaller than the `blocking-jdbc-dispatcher` pool
  # configured in `akka.projection`.
  poolMaxSize = 15
  # Fail fast if the pool can't instantly provide a connection.
  poolConnectionTimeoutMillis = 20
  poolValidationQuery = "select 1 as one"
  # ScalikeJDBC comes with this connection pool implementation
  # As Akka Persistence JDBC with Slick uses Hikari it makes sense to implement
  # a Hikari pool for ScalikeJDBC
  poolFactoryName = "commons-dbcp2"
}

scalikejdbc.global {
  loggingSQLErrors = true
  loggingConnections = false
}
